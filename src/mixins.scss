/*
*  These mixins help out for different options and breakpoints
*
*  References:
*  1) https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties#flex
*  2) https://css-tricks.com/almanac/properties/f/flex/
*  3) https://css-tricks.com/snippets/css/a-guide-to-flexbox/
*  4) https://github.com/philipwalton/flexbugs#3-min-height-on-a-flex-container-wont-apply-to-its-flex-items
*  5) http://godban.com.ua/projects/flexgrid
*/

$lib-prefix: 'fl-';

/**
* Flex Orders
*
* This mixin defines selectors for the order CSS property for flexible elements for a given breakpoint name
* https://developer.mozilla.org/en-US/docs/Web/CSS/order
*
* $break: name of the breakpoint
*/
@mixin flex-orders($break: null) {
  $break-suffix: '';
  @if $break != null { $break-suffix: '-#{$break}'; }

  $prop-name: '#{$lib-prefix}order#{$break-suffix}';

  @for $i from -20 through 20 {

    $selector: '[#{$prop-name}="#{$i}"]';

    #{$selector} {
      order: #{$i};
    }
  }
}

/**
* Flex Offsets
*
* This mixin defines selectors for offsets for flexible elements through the margin CSS property
* https://developer.mozilla.org/en/docs/Web/CSS/margin
*
* TODO: add support for margin-top for column layouts
*
* $break: name of the breakpoint
*/
@mixin flex-offsets($break: null) {
  $break-suffix: '';
  @if $break != null { $break-suffix: '-#{$break}'; }

  $prop-name: '#{$lib-prefix}order#{$break-suffix}';

  // Margins in increments of 5
  @for $i from 0 through 19 {

    $selector: '[#{$prop-name}="#{$i * 5}"]';

    #{$selector} {
      @if $i != 0 { margin-left: #{$i * 5 + '%'}; }
      @else { margin-left: 0 }
    }
  }

  // Margins for 33 and 66
  @each $i in 1, 2 {

    $selector: '[#{$prop-name}="#{$i * 33}"]';

    #{$selector} {
      margin-left: calc(#{$i * 100 + '%'} / 3);
    }
  }
}

/**
* Flex Alignment
*
* This mixin defines selectors for flexible child alignment through the CSS justify-content, align-items and
* align-content CSS properties
* https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content
* https://developer.mozilla.org/en-US/docs/Web/CSS/align-items
* https://developer.mozilla.org/en-US/docs/Web/CSS/align-content
*
* $break: name of the breakpoint
*
* NOTE: one subtle difference against NG1 is that both properties must be defined i.e. only defining one axis can have
* wrong effects. If this is desired to be changed, the selectors must be somehow modified to support this.
*/
@mixin flex-alignments($break: null) {

  // TODO Missing check if defaults are start stretch

  $break-suffix: '';
  @if $break != null { $break-suffix: '-#{$break}'; }

  $prop-name: '#{$lib-prefix}layout-align#{$break-suffix}';

  // Arrange on the Main Axis
  // start, center, end, space-around, space-between
  $main: (
    start: flex-start,
    center: center,
    end: flex-end,
    space-around: space-around,
    space-between: space-between
  );

  @each $key in map-keys($main) {
    $selector: '[#{$prop-name}^="#{$key} "]'; // The trailing space is on purpose

    #{$selector} {
      justify-content: map-get($main, $key);
    }
  }

  // Arrange on the Cross Axis
  // start, center, end, stretch
  $cross: (
    start: flex-start,
    center: center,
    end: flex-end,
    stretch: stretch,
  );

  @each $key in map-keys($cross) {
    $selector: '[#{$prop-name}$=" #{$key}"]'; // The leading space is on purpose

    #{$selector} {
      align-items: map-get($cross, $key);
      align-content: map-get($cross, $key);

      @if ($key == center) { // IE overflow fix
        max-width: 100%;
        box-sizing: border-box;
      }
    }
  }
}

/**
* Flex Layout
*
* This mixin defines selectors for flexible parents through the CSS flex-direction property
* https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction
*
* $break: name of the breakpoint
*
*/
@mixin flex-layouts($break: null) {
  $break-suffix: '';
  @if $break != null { $break-suffix: '-#{$break}'; }

  $prop-name: '#{$lib-prefix}layout#{$break-suffix}';

  [#{$prop-name}], [#{$prop-name}="row"], [#{$prop-name}="column"] {
    box-sizing: border-box;
    display: flex; // TODO Autoprefixer for vendor prefixes
  }

  [#{$prop-name}="row"] { flex-direction: row; }
  [#{$prop-name}="column"] { flex-direction: column; }
}


