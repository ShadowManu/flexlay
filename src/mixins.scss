/*
*  These mixins help out for different options and breakpoints
*
*  References:
*  1) https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties#flex
*  2) https://css-tricks.com/almanac/properties/f/flex/
*  3) https://css-tricks.com/snippets/css/a-guide-to-flexbox/
*  4) https://github.com/philipwalton/flexbugs#3-min-height-on-a-flex-container-wont-apply-to-its-flex-items
*  5) http://godban.com.ua/projects/flexgrid
*/

$lib-prefix: 'fl-';

/**
* Flex Orders
*
* This mixin defines selectors for the CSS order property for flexible elements for a given breakpoint name
* https://developer.mozilla.org/en-US/docs/Web/CSS/order
*
* $break: name of the breakpoint
*/
@mixin flex-orders($break: null) {
  $break-suffix: '';
  @if $break != null { $break-suffix: '-#{$break}'; }

  $prop-name: '#{$lib-prefix}order#{$break-suffix}';

  @for $i from -20 through 20 {

    $selector: '[#{$prop-name}="#{$i}"]';

    #{$selector} {
      order: #{$i};
    }
  }
}

/**
* Flex Offsets
*
* This mixin defines selectors for offsets for flexible elements through the CSS margin property
* https://developer.mozilla.org/en/docs/Web/CSS/margin
*
* TODO: add support for margin-top for column layouts
*
* $break: name of the breakpoint
*/
@mixin flex-offsets($break: null) {
  $break-suffix: '';
  @if $break != null { $break-suffix: '-#{$break}'; }

  $prop-name: '#{$lib-prefix}order#{$break-suffix}';

  // Margins in increments of 5
  @for $i from 0 through 19 {

    $selector: '[#{$prop-name}="#{$i * 5}"]';

    #{$selector} {
      @if $i != 0 { margin-left: #{$i * 5 + '%'}; }
      @else { margin-left: 0 }
    }
  }

  // Margins for 33 and 66
  @each $i in 1, 2 {

    $selector: '[#{$prop-name}="#{$i * 33}"]';

    #{$selector} {
      margin-left: calc(#{$i * 100 + '%'} / 3)
    }
  }
}
