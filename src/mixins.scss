/*
*  These mixins help out for different options and breakpoints
*
*  References:
*  1) https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties#flex
*  2) https://css-tricks.com/almanac/properties/f/flex/
*  3) https://css-tricks.com/snippets/css/a-guide-to-flexbox/
*  4) https://github.com/philipwalton/flexbugs#3-min-height-on-a-flex-container-wont-apply-to-its-flex-items
*  5) http://godban.com.ua/projects/flexgrid
*/

$lib-prefix: 'fl-';





/**
* Flex Layout
*
* This mixin defines selectors for flexible parents through the CSS flex-direction property
* https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction
*
* $break: name of the breakpoint
*
*/
@mixin flex-layouts($break: null) {
  $break-suffix: '';
  @if $break != null { $break-suffix: '-#{$break}'; }

  $prop-name: '#{$lib-prefix}layout#{$break-suffix}';

  [#{$prop-name}], [#{$prop-name}="row"], [#{$prop-name}="column"] {
    box-sizing: border-box;
    display: flex; // TODO Autoprefixer for vendor prefixes
  }

  [#{$prop-name}="row"] { flex-direction: row; }
  [#{$prop-name}="column"] { flex-direction: column; }
}

/**
* Flex Properties
*
* This mixin defines selectors for flexible parents through the CSS flex-direction property
* https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction
*
* $break: name of the breakpoint
*
*/
@mixin flex-properties($break: null) {

  $break-suffix: '';
  @if $break != null { $break-suffix: '-#{$break}'; }

  $prop-name: '#{$lib-prefix}flex#{$break-suffix}';
  $layout-name: '#{$lib-prefix}layout#{$break-suffix}';

  [#{$prop-name}]           { flex: 1;         box-sizing: border-box; }  // === flex: 1 1 0%;

  [#{$prop-name}-grow]      { flex: 1 1 100%;  box-sizing: border-box; }
  [#{$prop-name}-initial]   { flex: 0 1 auto;  box-sizing: border-box; }
  [#{$prop-name}-auto]      { flex: 1 1 auto;  box-sizing: border-box; }
  [#{$prop-name}-none]      { flex: 0 0 auto;  box-sizing: border-box; }
  [#{$prop-name}-noshrink]  { flex: 1 0 auto;  box-sizing: border-box; }
  [#{$prop-name}-nogrow]    { flex: 0 1 auto;  box-sizing: border-box; }

  // Flex with percentages (in increments of 5)
  @for $i from 0 through 20 {
    $value : #{$i * 5 + '%'};

    // Default
    [#{$prop-name}="#{$i * 5}"] {
      flex: 1 1 #{$value};
      max-width: #{$value};
      max-height: 100%;
      box-sizing: border-box;
    }

    // Row Layouts
    [fl-layout="row"] > [#{$prop-name}="#{$i * 5}"],
    [#{$layout-name}="row"] > [#{$prop-name}="#{$i * 5}"] {
      flex: 1 1 #{$value};
      max-width: #{$value};
      max-height: 100%;
      box-sizing: border-box;
    }

    // Bug workaround for http://crbug.com/546034 - flex issues on Chrome 48
    @if $i == 0 {  min-width: 0;  }

    // Row Layouts
    [fl-layout="column"] > [#{$prop-name}="#{$i * 5}"],
    [#{$layout-name}="column"] > [#{$prop-name}="#{$i * 5}"] {
      flex: 1 1 #{$value};
      max-width: 100%;
      max-height: #{$value};
      box-sizing: border-box;
    }

    // Bug workaround for http://crbug.com/546034 - flex issues on Chrome 48
    @if $i == 0 {  min-height: 0;  }
  }
}
